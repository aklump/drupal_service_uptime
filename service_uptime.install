<?php

/**
 * @file
 * Handles installation steps for service_uptime
 */

use Drupal\Core\Url;
use Drupal\service_uptime\Service\ServiceUptime;

/**
 * The install hook will fire when the module gets installed
 */
function service_uptime_install() {
  // Generate a unique private key and store it.
  \Drupal::configFactory()
    ->getEditable('service_uptime.settings')
    ->set('public_key', md5(rand(5000, 10000)))
    ->save();
}

/**
 * Implements hook_requirements().
 */
function service_uptime_requirements($phase) {
  $reqs = [];
  $t = 't';
  if ($phase == 'runtime') {
    if (($check = _service_uptime_check_service()) !== TRUE) {
      $reqs['service_uptime'] = [
        'title' => $t('Service Uptime'),
        'severity' => REQUIREMENT_WARNING,
      ];

      switch ($check) {
        case -1:
          $reqs['service_uptime']['value'] = $t('Not configured');
          $reqs['service_uptime']['description'] = $t(ServiceUptime::NOT_CONFIGURED_MESSAGE, [
            ':admin_settings_url' => Url::fromRoute('service_uptime.admin_settings')
              ->toString(),
          ]);

          break;

        case -2:
          $reqs['service_uptime']['value'] = $t('Server error');
          $reqs['service_uptime']['description'] = $t('Your server does not support this module.');
          break;

        case FALSE:
        default:
          $reqs['service_uptime']['value'] = $t('Connection problem');
          $reqs['service_uptime']['description'] = $t('Unable to connect to Service Uptime to retrieve statistics.');
          break;
      }
    }
    else {
      $reqs['service_uptime'] = [
        'title' => $t('Service Uptime'),
        'value' => $t('Connected and ready'),
        'severity' => REQUIREMENT_OK,
        'description' => $t('<a href=":url">View</a> your statistics.', [
          ':url' => Url::fromRoute('service_uptime.stats_page')->toString(),
        ]),
      ];
    }
  }

  return $reqs;
}

/**
 * Checks to make sure the service is configured and able to report stats
 */
function _service_uptime_check_service() {
  $su = \Drupal::service('service_uptime');
  if (!($qs = $su->getAccountQueryString())
    || !\Drupal::config('service_uptime.settings')->get('public_key')) {
    return -1;
  }
  try {
    return boolval($su->getStatisticsMarkup());
  }
  catch (\Exception $exception) {
    return -2;
  }
}

