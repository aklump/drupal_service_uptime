<?php

/**
 * @file
 * Handles installation steps for service_uptime
 */

/**
 * The install hook will fire when the module gets installed
 */
function service_uptime_install() {
  // Generate a unique private key and store it.
  variable_set('service_uptime_private_key', md5(rand(5000, 10000)));
}

/*
 * The uninstall hook will fire when the module gets uninstalled.
 */
function service_uptime_uninstall() {
  //Clean up our entries in the variables table.
  if ($result = db_query("SELECT name FROM {variable} WHERE `name` LIKE 'service_uptime%'")) {
    foreach ($result as $data) {
      variable_del($data->name);
    }
  }
}

/**
 * Implements hook_requirements().
 */
function service_uptime_requirements($phase) {
  $reqs = array();
  $t = get_t();
  if ($phase == 'runtime') {
    if (($check = _service_uptime_check_service()) !== TRUE) {
      $reqs['service_uptime'] = array(
        'title' => $t('Service Uptime'),
        'severity' => REQUIREMENT_WARNING,
      );
      switch ($check) {
        case -1:
          $reqs['service_uptime']['description'] = t(SERVICE_UPTIME_NOT_CONFIGURED_MESSAGE, [
            '!admin_settings_url' => url(SERVICE_UPTIME_PATH_DRUPAL_SETTINGS),
          ]);
          break;

        case -2:
          $reqs['service_uptime']['description'] = $t('Your server does not support this module.');
          break;

        case FALSE:
        default:
          $reqs['service_uptime']['description'] = $t('Unable to connect to Service Uptime to retrieve statistics.');
          break;
      }
    }
    else {
      $reqs['service_uptime'] = array(
        'title' => $t('Service Uptime'),
        'value' => $t('Connected and Ready'),
        'severity' => REQUIREMENT_OK,
        'description' => $t('<a href="@url">View</a> your statistics.', array(
          '@url' => url(SERVICE_UPTIME_PATH_DRUPAL_STATS),
        )),
      );
    }
  }

  return $reqs;
}

/**
 * Checks to make sure the service is configured and able to report stats
 */
function _service_uptime_check_service() {
  if (!($qs = service_uptime_get_account_query_string()) || !variable_get('service_uptime_private_key', NULL)) {
    return -1;
  }
  try {
    return boolval(service_uptime_get_statistics_markup());
  }
  catch (\Exception $exception) {
    return -2;
  }
}

