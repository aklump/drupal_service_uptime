<?php

/**
 * @file
 * Base module file for service_uptime.
 */

/**
 * Message for not-yet-configured.
 *
 * @var SERVICE_UPTIME_NOT_CONFIGURED_MESSAGE
 */
define('SERVICE_UPTIME_NOT_CONFIGURED_MESSAGE', 'You have not yet configured your Service Uptime settings; please <a href="!admin_settings_url">click here</a>.');

/**
 * This is the base url for stats.
 *
 * @var SERVICE_UPTIME_URL_STATS
 */
define('SERVICE_UPTIME_URL_STATS', 'http://www.serviceuptime.com/users/servicestat.php');

/**
 * This is the regex for checking user token links.
 *
 * @var SERVICE_UPTIME_REGEX
 */
define('SERVICE_UPTIME_REGEX', '/^https?:\/\/www\.serviceuptime.com\/users\/(?:uptime)?monitoring\.php(\?(S=\w+)\&(Id=\d+))$/');

/**
 * The url to be used to link to stats page.
 *
 * @var SERVICE_UPTIME_URL_STATS
 */
define('SERVICE_UPTIME_PATH_DRUPAL_STATS', 'admin/reports/service-uptime/stats');

/**
 * The internal path to settings page.
 *
 * @var SERVICE_UPTIME_PATH_DRUPAL_SETTINGS
 */
define('SERVICE_UPTIME_PATH_DRUPAL_SETTINGS', 'admin/reports/service-uptime/settings');

/**
 * The example format of a link.
 *
 * @var SERVICE_UPTIME_EXAMPLE_LINK
 */
define('SERVICE_UPTIME_EXAMPLE_LINK', 'https://www.serviceuptime.com/users/monitoring.php?S=a07db1b0170f92d081fec95806daef7f&Id=12259');

/**
 * The internal drupal path to the check url for SU to ping.
 *
 * @var SERVICE_UPTIME_PATH_CHECK
 */
define('SERVICE_UPTIME_PATH_CHECK', 'service-uptime/check');

/**
 * Implementation of hook_perm()
 */
function service_uptime_permission() {
  return array(
    'administer service_uptime' => array(
      'title' => t('Administer service_uptime'),
      'description' => t('Perform administration tasks for service_uptime.'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function service_uptime_menu() {
  $items = array();

  $items['admin/reports/service-uptime'] = array(
    'title' => 'Service Uptime',
    'page callback' => 'service_uptime_stats_page',
    'access arguments' => array('administer service_uptime'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'service_uptime.pages.inc',
  );
  $items[SERVICE_UPTIME_PATH_DRUPAL_STATS] = array(
    'title' => 'View Stats',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[SERVICE_UPTIME_PATH_DRUPAL_SETTINGS] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('service_uptime_admin_settings'),
    'access arguments' => array('administer service_uptime'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'service_uptime.admin.inc',
  );
  $items[SERVICE_UPTIME_PATH_CHECK] = array(
    'title' => 'title',
    'description' => 'description',
    'page callback' => 'service_uptime_check_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'service_uptime.pages.inc',
  );

  return $items;
}

/**
 * Return the service uptime query string for this website
 *
 * This is a portion of the Service Uptime Statistics Link entered in settings.
 */
function service_uptime_get_account_query_string() {
  if (($link = variable_get('service_uptime_qs', NULL)) && preg_match(SERVICE_UPTIME_REGEX, $link, $found) && $found[1]) {
    return $found[1];
  };

  return FALSE;
}

/**
 * Create an absolute URL to service uptime (with affiliate link).
 *
 * @param string $path
 *   The path at service uptime.
 *
 * @return string
 *   The full URL with affiliate link when appropriate.
 */
function service_uptime_url($path = '/') {
  $options = [];
  if ($path === '/') {
    $options['query']['aff'] = 'R779';
  }

  return url('http://www.serviceuptime.com/' . trim($path, '/'), $options);
}

/**
 * Get the hash (Search String)
 *
 * @param null $seed
 *
 * @return bool|string
 */
function service_uptime_get_public_hash($seed = NULL) {
  $seed = empty($seed) ? variable_get('service_uptime_private_key', NULL) : $seed;
  if ($seed) {
    $token = md5($seed . drupal_get_private_key());

    return $token;
  }

  return FALSE;
}


/**
 * Return the statistics markup from Service Uptime for an URL.
 *
 * @return string
 *   The markup from Service Uptime.
 *
 * @throws \RuntimeException
 *   If the server cannot make a remote connection.
 */
function service_uptime_get_statistics_markup() {
  $url = variable_get('service_uptime_qs', NULL);
  if (intval(get_cfg_var('allow_url_fopen')) && function_exists('file_get_contents')) {
    if (!($content = @file_get_contents($url))) {
      return FALSE;
    }
  }
  elseif (intval(get_cfg_var('allow_url_fopen')) && function_exists('file')) {
    if (!($content = @file($url))) {
      return FALSE;
    }

    $content = @join('', $content);
  }
  elseif (function_exists('curl_init')) {
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    ob_start();
    $content = curl_exec($ch);
    if (curl_error($ch)) {
      $content = FALSE;
    }
    curl_close($ch);
    if (!$content) {
      return $content;
    }
  }
  if ($content) {
    if (!preg_match('/<section\s*id="content".+?<\/section>/si', $content, $matches)) {
      return FALSE;
    }

    return $matches[0];
  }
  throw new \RuntimeException("This server is unable to make a remote connection.");
}
